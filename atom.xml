<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jack-yixi.github.io</id>
    <title>Jack-yixi</title>
    <updated>2020-10-14T08:27:56.863Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jack-yixi.github.io"/>
    <link rel="self" href="https://jack-yixi.github.io/atom.xml"/>
    <subtitle>学习分享
</subtitle>
    <logo>https://jack-yixi.github.io/images/avatar.png</logo>
    <icon>https://jack-yixi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jack-yixi</rights>
    <entry>
        <title type="html"><![CDATA[JAVA学习--类型转换和字符串转换]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-lei-xing-zhuan-huan-he-zi-fu-chuan-zhuan-huan</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-lei-xing-zhuan-huan-he-zi-fu-chuan-zhuan-huan">
        </link>
        <updated>2020-10-14T08:05:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1基本类型转字符串">1.基本类型转字符串</h2>
<pre><code>				//1.1加&quot;&quot;
				int a = 20;
        String str1 = a + &quot;&quot;;
        System.out.println(str1);
				
        //1.2Integer.toString()转换
        String str2 = Integer.toString(a);
        System.out.println(str2);
</code></pre>
<h2 id="2字符串转基本类型">2.字符串转基本类型</h2>
<pre><code>				//2.字符串转基本类型
        //使用Integer.parseXXX()转换
        String str3 = &quot;2342&quot;;
        int a1 = Integer.parseInt(str3);
        System.out.println(a1);
</code></pre>
<h2 id="3boolean形式的字符串转换">3.boolean形式的字符串转换</h2>
<pre><code>				//boolean形式的字符串转换，&quot;true&quot;----&gt;ture,非&quot;true&quot;-----&gt;false
        String str4 = &quot;true&quot;;
        String str5 = &quot;treu&quot;;
        boolean b1 = Boolean.parseBoolean(str4);
        boolean b2 = Boolean.parseBoolean(str5);
        System.out.println(b1);
        System.out.println(b2);
</code></pre>
<h2 id="4结果">4结果</h2>
<p><img src="https://jack-yixi.github.io/post-images/1602663050925.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--常用方法]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-chang-yong-fang-fa</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-chang-yong-fang-fa">
        </link>
        <updated>2020-10-13T10:29:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类">类</h2>
<pre><code>package com.yixi.userClass.getClass;

import java.util.Objects;

public class Student {
    private String name ;
    private int age ;

    public Student() {
    }

    public Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return &quot;Student{&quot; +
                &quot;name='&quot; + name + '\'' +
                &quot;, age=&quot; + age +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        //如果当前对象的是o的应用对象，则返回true
        if (this == o) return true;
        //如果对象为空或者当前对象的类型与传过来的对象的类型不同，表示非相同对象，返回false
        if (o == null || getClass() != o.getClass()) return false;
        //强制类型转化，转为student类型的student
        Student student = (Student) o;
        //判断两个对象的成员变量是否相同，相同返回true，否则返回false
        return age == student.age &amp;&amp;
                Objects.equals(name, student.name);
    }
}

</code></pre>
<h3 id="1getclass方法获取返回对象的类型">1.getClass()方法，获取返回对象的类型</h3>
<pre><code>         Student s1 = new Student(&quot;aaa&quot;,22);
         Student s2 = new Student(&quot;bbb&quot;,32);
         Class c1 = s1.getClass();
         Class c2 = s2.getClass();
         if (c1==c2){
             System.out.println(&quot;s1和s2是同一类型&quot;);
         }else{
             System.out.println(&quot;s1和s2不是同一类型&quot;);
         }
</code></pre>
<p>结果</p>
<pre><code>s1和s2是同一类型
</code></pre>
<h3 id="2hashcode方法返回当前对象的哈希值相同对象的哈希值一样">2.hashCode()方法，返回当前对象的哈希值,相同对象的哈希值一样</h3>
<pre><code> Student s3 = s1;
        System.out.println(s1.hashCode());
        System.out.println(s2.hashCode());
        System.out.println(s3.hashCode());
</code></pre>
<p>结果</p>
<pre><code>189568618
793589513
189568618
</code></pre>
<h3 id="3tostring方法-返回当前对象的字符串表示可重构">3.toString()方法 返回当前对象的字符串表示,可重构</h3>
<pre><code>System.out.println(s1.toString());
        System.out.println(s2.toString());
</code></pre>
<p>结果</p>
<pre><code>Student{name='aaa', age=22}
Student{name='bbb', age=32}
</code></pre>
<h3 id="4equals方法判断两个对象是否相等">4.equals()方法，判断两个对象是否相等</h3>
<pre><code> Student s4 = new Student(&quot;小明&quot;, 17);
        Student s5 = new Student(&quot;小明&quot;, 17);
        System.out.println(s4.equals(s5));
        //重写前返回false.因为s4和s5是两个不同的对象
        //想要用equals判断两个对象&quot;内容&quot;是否一样，需要对equals进行重写
</code></pre>
<p>结果</p>
<pre><code>true
</code></pre>
<h3 id="5finalize方法">5.finalize()方法</h3>
<p>一般有系统自己调用，自动回收判断为垃圾的变量，节省空间</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--静态内部类]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-jing-tai-nei-bu-lei</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-jing-tai-nei-bu-lei">
        </link>
        <updated>2020-09-19T06:44:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="完整源代码">完整源代码</h2>
<pre><code>package com.yixi.userClass.Static;
//外部类
public class Outer {
    //实例变量
    private String name = &quot;张三&quot;;
    private int age = 10;
    //静态内部类,级别的Outer一样
    static class Inner{
        //内部类变量
        private String address = &quot;上海&quot;;
        private int phone = 110;
        //可以定义静态变量
        private static String name2 = &quot;哈哈&quot;;
        public void show (){
            //访问外部内变量
            Outer outer = new Outer();
            System.out.println(outer.name);
            System.out.println(outer.age);
            //访问内部类变量
            System.out.println(address);
            System.out.println(phone);
            //静态成员通过类访问
            System.out.println(Inner.name2);
        }
    }
}
</code></pre>
<pre><code>package com.yixi.userClass.Static;

public class Test {
    //静态内部类可以直接new其对象
    public static void main(String[] args) {
        Outer.Inner inner = new Outer.Inner();
        inner.show();
    }
}
</code></pre>
<h2 id="运行结果">运行结果</h2>
<p><img src="https://jack-yixi.github.io/post-images/1600498077545.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--成员内部类]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-cheng-yuan-nei-bu-lei</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-cheng-yuan-nei-bu-lei">
        </link>
        <updated>2020-09-19T06:10:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="完整源代码">完整源代码</h2>
<pre><code>package com.yixi.userClass.chengyuan;
//外部类
public class outer {
    //实例变量
    private String name = &quot;张三&quot;;
    private int age = 20;

    //内部类
    class Inner{
        //成员内部类不能定义静态成员,但可以包含静态常量
        //内部类变量
        private String name = &quot;李四&quot;;
        private String address = &quot;北京&quot;;
        private  int phone = 110;
        //内部类方法
        public void show(){
            //打印外部类变量
            //当外部类和内部类存在重名属性时，会优先访问内部类
            System.out.println(name);
            //同名情况下访问外部类
            System.out.println(outer.this.name);
            System.out.println(age);
            //打印内部类变量
            System.out.println(address);
            System.out.println(phone);
        }
    }
}
</code></pre>
<pre><code>package com.yixi.userClass.chengyuan;

import com.yixi.userClass.chengyuan.outer;

public class test {
    public static void main(String[] args) {
        outer.Inner inner = new outer().new Inner();
        inner.show();

    }
}
</code></pre>
<h2 id="结果">结果</h2>
<p><img src="https://jack-yixi.github.io/post-images/1600496001095.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--private访问]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-private-fang-wen</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-private-fang-wen">
        </link>
        <updated>2020-09-13T07:36:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="完整代码">完整代码</h2>
<pre><code>package com.yixi.oop.Demo03;

public class Demo02 {
    private String name;
    private int id;

    public String getName(){
        return this.name;
    }
    public void setName(String name){
        this.name = name;
    }
    public int getId(){
        return this.id;
    }
    public void setId(int id){
        this.id = id;
    }
}
</code></pre>
<pre><code>package com.yixi.oop.Demo03;

public class Demo01 {
    public static void main(String[] args) {
        Demo02  d2 = new Demo02();
        d2.setName(&quot;张三&quot;);
        System.out.println(&quot;名字：&quot;+d2.getName());
        d2.setId(23);
        System.out.println(&quot;学号：&quot;+d2.getId());
    }
}
</code></pre>
<h2 id="结果">结果</h2>
<p><img src="https://jack-yixi.github.io/post-images/1599982796376.png" alt=""></p>
<p>当变量前加上private关键字，主方法无法直接访问，只能通过调用方法的方式间接赋值和访问。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--构造器]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-gou-zao-qi</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-gou-zao-qi">
        </link>
        <updated>2020-09-13T02:45:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="构造器的代码">构造器的代码</h3>
<pre><code>package com.yixi.oop.Demo02;

public class Person {
    String name;
    int age;

    public Person(){
    //无参构造，也称构造方法/函数
    }
    //有参构造
		
    //单参构造
    public Person(String name) {
        this.name = name;
    }
    //多参构造
    public Person(String name,int age) {
        this.name = name;
        this.age = age;
    }
}
</code></pre>
<pre><code>package com.yixi.oop.Demo02;

public class Demo03 {
    public static void main(String[] args) {
        //无参实例化
        Person Person = new Person();
        System.out.println(Person.name);
				
        //单参实例化
        Person ren = new Person(&quot;李四&quot;);
        System.out.println(ren.name);
				
        //多参实例化
        Person daren = new Person(&quot;王五&quot;,20);
        System.out.println(daren.name);
        System.out.println(daren.age);
    }
}
</code></pre>
<h3 id="结果">结果</h3>
<p><img src="https://jack-yixi.github.io/post-images/1599966004140.png" alt=""></p>
<h3 id="构造器的使用以及目的">构造器的使用以及目的</h3>
<p>目的：<br>
1.使用new方法实质是默认在调用构造器<br>
2.为了初始化对象<br>
使用：<br>
1.无参构造会自动生成<br>
2.单参/多参需要手动写</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习--类型转换]]></title>
        <id>https://jack-yixi.github.io/post/java-xue-xi-lei-xing-zhuan-huan</id>
        <link href="https://jack-yixi.github.io/post/java-xue-xi-lei-xing-zhuan-huan">
        </link>
        <updated>2020-09-07T02:09:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="类型转换">类型转换</h2>
<p>低&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;高<br>
byte-&gt;short-&gt;char-&gt;int-&gt;long-&gt;float-&gt;double</p>
<p>1.自动类型转换：由低到高转换</p>
<pre><code>	byte num = 24;
	int num2 = num;
</code></pre>
<p>2.强制类型转换：由高到低转换</p>
<pre><code>	int num = 23;
	byte num2 = (byte)num;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP入门小项目——验证码]]></title>
        <id>https://jack-yixi.github.io/post/php-ru-men-xiao-xiang-mu-yan-zheng-ma</id>
        <link href="https://jack-yixi.github.io/post/php-ru-men-xiao-xiang-mu-yan-zheng-ma">
        </link>
        <updated>2020-06-28T07:16:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="直接上源代码相应的函数在代码中有解释">直接上源代码,相应的函数在代码中有解释</h2>
<pre><code>&lt;?php
header('Content-Type:image/jpeg');//以jpg形式输出
$width=120;
$height=40;
$img=imagecreatetruecolor($width,$height);//使用imagecreatetruecolor画一                                                                     //个图像，控制宽度与高度
$image_bg=imagecolorallocate($img, rand(200,255),rand(200,255), rand(200,255));//编写一个图像背景
$array=array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','z','0','1','3','6','7','8','9','4','5','2');//创建数组编存放图片中可能出现的字符
$string='';
for($i=1;$i&lt;=4;$i++){
     $string.=$array[rand(0,count($array)-1)];//给图片添加需要输出字符串
}
imagefill($img,0,0,$image_bg);//imagefill 给图片填充背景颜色
for($i=0;$i&lt;=200;$i++){
    imagesetpixel($img , rand(0,119) , rand(0,39) ,imagecolorallocate($img, rand(20,200),rand(20,200), rand(00,200)) );// imagesetpixel给图片添加个单像
																																//素的点，提高难以辨别度

}
for($i=0;$i&lt;=2;$i++){
    imageline ($img , rand(30,$width/2) , rand(10,30) , rand($width/2,$width), rand(10,30) , imagecolorallocate($img, rand(20,200),rand(20,200), rand(00,200)) ) ;//imageline  给图片添加横线，提高难以辨别度

}
imagettftext ( $img, 20 ,rand(5,15), rand(30,40) , rand(30,35) ,imagecolorallocate($img, rand(20,100),rand(20,100), rand(20,100)) , 'Inkfree.ttf' , $string ) ;//imagettftext给图片添加验证码字符
imagejpeg($img);       //输出图片
?&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PHP入门之全局变量无法在函数中访问]]></title>
        <id>https://jack-yixi.github.io/post/php-ru-men-zhi-quan-ju-bian-liang-wu-fa-zai-han-shu-zhong-fang-wen</id>
        <link href="https://jack-yixi.github.io/post/php-ru-men-zhi-quan-ju-bian-liang-wu-fa-zai-han-shu-zhong-fang-wen">
        </link>
        <updated>2020-06-25T09:13:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="运行代码">运行代码</h2>
<pre><code>&lt;?php
$a=10;
function add($c,$b){
    $a++;
    return $c+$b;
}
$d=add(3,5);
echo $d;
echo '&lt;br /&gt;';
echo $a;
?&gt;
</code></pre>
<h2 id="运行报错">运行报错</h2>
<pre><code>Notice: Undefined variable: a in    D:\phpStudy\PHPTutorial\WWW\global.php on line 5
echo $a值为10
</code></pre>
<h2 id="修改">修改</h2>
<p>加入以下语句，在函数体声明外部全局变量</p>
<pre><code>global $a;
</code></pre>
<h2 id="完整代码">完整代码</h2>
<pre><code>&lt;?php
$a=10;
function add($c,$b){
    global $a;
    $a++;
    return $c+$b;
}
$d=add(3,5);
echo $d;
echo '&lt;br /&gt;';
echo $a;
?&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单的前后端交互——php（jQuery-Ajax）]]></title>
        <id>https://jack-yixi.github.io/post/jian-dan-de-qian-hou-duan-jiao-hu-phpjquery-ajax</id>
        <link href="https://jack-yixi.github.io/post/jian-dan-de-qian-hou-duan-jiao-hu-phpjquery-ajax">
        </link>
        <updated>2020-04-16T11:51:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1ajax给后端提供数据">1.Ajax给后端提供数据</h2>
<p>代码：</p>
<pre><code>&lt;div&gt;&lt;button id=&quot;aaa&quot;&gt;测试&lt;/button&gt;&lt;/div&gt;
&lt;script&gt;
$(document).ready(function(){
			    $(&quot;#aaa&quot;).click(function(){

				$.post(&quot;./api/captcha.php&quot;, 
					{
						name:&quot;菜鸟教程&quot;,
						url:&quot;https://www.www.tdyixi.cn&quot;
					},
				function(data,status){
				alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);
						});
                    });
                });
&lt;/script&gt;
</code></pre>
<p>注：1.通过<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 3: (&quot;#̲aaa&quot;).click(fun…'>(&quot;#aaa&quot;).click(function()给按钮添加事件。
	   	2.使用</span>.post() 方法通过 HTTP POST 请求向服务器提交数据。<br>
3.function(data,status)为回调函数。<br>
4.切记不要忘了引用jQuery文件。</p>
<h2 id="2后端接受到数据">2.后端接受到数据</h2>
<p>代码：</p>
<pre><code>&lt;?php
$name=$_POST['name'];
$url=$_POST['url'];
print_r(&quot;我接收到了&quot;.$name);
print_r(https://jack-yixi.github.io/post-images/1587041578759.png)
echo &quot;succes&quot;;
?&gt;
</code></pre>
<p>注：通过print_r打印出所获取的内容，最终并返回success。</p>
<h2 id="3结果">3.结果</h2>
<img width="300px" src="C:\Users\Lenovo\Desktop\_(RFZJLC)XJBP9D$~XDEI~C.png" />]]></content>
    </entry>
</feed>